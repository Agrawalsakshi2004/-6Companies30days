vector<int> rect;
    vector<vector<int>> rects;

    int area(vector<int> &r){
        return (r[2] - r[0] +1) * (r[3] - r[1] +1); //width*height of each rect in rects
    }

    Solution(vector<vector<int>>& rects) {
        //saare rectangles ke areas add kr diye taki jab pick kre toh sabko equal chance mile
        //basically pure points jitte cover ho sakte h saare rect ko milakr usko add kr rahe hai
        //jaise pehle rect se 8 phir 12 phir 10 , 8+12+10
        this->rects = rects;
        int totalArea = 0;
        for(auto r: rects){
            totalArea += area(r);
            rect.push_back(totalArea);
        }
    }
    
    vector<int> pick() {
        //pick random rect
        int randm = rand()%rect.back();
        //idx hume just greater nahi toh equal value than randm dega kyuki
        //if it chooses 0 by randm then it would be 1 as there is no rect with zero point 
        //atleast will have one point
        int idx = upper_bound(rect.begin(), rect.end(), randm) - rect.begin();

        //pick random pt in reacts[idx]
        auto r = rects[idx];
        int x = rand() % (r[2] - r[0] +1) + r[0];
        int y = rand() % (r[3] - r[1] +1) + r[1];
        return {x,y};

    }
